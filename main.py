import telebot
import core
import json
import config
from telebot import types
bot = telebot.TeleBot(config.token)
doc = core.load_doc('main.docx')
corp = core.preprocess_corpus(doc)

with open('main.json', 'r', encoding='utf-8') as f:
    links_dictionary = json.load(f)

def keyboard_feedback():
    keyboard = types.InlineKeyboardMarkup()
    next_5 = types.InlineKeyboardButton(text='üîç–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø—è—Ç—å –æ—Ç–≤–µ—Ç–æ–≤', callback_data='next5')
    feedback = types.InlineKeyboardButton(text='üì£–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', url='https://t.me/softestingchannel')
    keyboard.add(next_5)
    keyboard.add(feedback)
    return keyboard

def keyboard_feedback2():
    keyboard = types.InlineKeyboardMarkup()
    feedback = types.InlineKeyboardButton(text='üì£–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', url='https://t.me/softestingchannel')
    keyboard.add(feedback)
    return keyboard

def keyboard_start_menu():
    keyboard = types.InlineKeyboardMarkup()
    laws_list = types.InlineKeyboardButton(text= 'üìú–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∑–∞–∫–æ–Ω–æ–≤', callback_data='laws_list')
    #ind_law = types.InlineKeyboardButton(text =  'üìñ–ò—Å–∫–∞—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –∑–∞–∫–æ–Ω–µ', callback_data='ind_law')
    #all_laws = types.InlineKeyboardButton(text = 'üìö–ò—Å–∫–∞—Ç—å –≤–æ –≤—Å–µ—Ö –∑–∞–∫–æ–Ω–∞—Ö', callback_data='all_laws')
    keyboard.add(laws_list)
    #keyboard.add(ind_law)
    #keyboard.add(all_laws)
    return keyboard


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    help_message = '—ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö ' + \
                   '—é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ ' + \
                   '–æ—Ç–¥–µ–ª–∞ DPO.\n\n' +  \
                   'üìå–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –≤–∏–¥–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–∞–±–æ—Ä–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. ' + \
                   '–ò–º–µ–π—Ç–µ –≤ –≤–∏–¥—É: —á–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–π –∏ –ø–æ–ª–Ω–µ–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–º –≤—ã—à–µ —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤!\n' + \
                   'üìå–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ ("?")!\n\n' + \
                   '–ü—Ä–∏–º–µ—Ä—ã –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: \n\n' + \
                   '–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–æ—Ç–∞ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?\n\n' + \
                   '–ö–∞–∫–æ–π —Å—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –ø–æ —Å–æ–±–ª—é–¥–µ–Ω–∏—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?\n\n' +\
                   '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —á—Ç–æ —ç—Ç–æ?\n\n' + \
                   '–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç?\n\n' + \
                   '–û—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–∫–∞–∑–∞ –≤–æ –≤–Ω–µ—Å–µ–Ω–∏–∏ —Å–≤–µ–¥–µ–Ω–∏–π –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä?\n'

    bot.reply_to(message, text = '–ü—Ä–∏–≤–µ—Çüëã ' + message.from_user.first_name + ', ' + help_message, reply_markup = keyboard_start_menu())

@bot.message_handler(commands=['laws'])
def send_laws_list(message):
    bot.reply_to(message, text=config.list_of_laws)

@bot.message_handler(func=lambda message: True)
def echo_all(message):

    if message.text[-1] == '?':
        index_string = core.top_docs_bm25okapi(message.text, corp, 5)
        answer = ''
        for idx in index_string:
            if str(idx) in links_dictionary:
                for item in links_dictionary[str(idx)]:
                    answer += item + '\n'
                answer += doc[idx] + '\n\n'
            else:
                answer += str(idx) + '\n' + doc[idx] + '\n\n'

        bot.reply_to(message, answer, reply_markup=keyboard_feedback())

    else:
        bot.reply_to(message, text='–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –æ–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ ("?")')


@bot.callback_query_handler(lambda call: True)
def callback_answer(call):
    if call.data == 'da':
        bot.answer_callback_query(call.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!üòÉ', show_alert=False)

    elif call.data == 'nyet':
        bot.answer_callback_query(call.id, text='–ñ–∞–ª—å!üòî –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª—É—á—à–µ!', show_alert=False)

    elif call.data == 'laws_list':
        bot.reply_to(call.message, text=config.list_of_laws)

    elif call.data == 'ind_law':
        bot.answer_callback_query(call.id, text='–ü–æ–∫–∞ –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç', show_alert=True)

    elif call.data == 'all_laws':
        bot.answer_callback_query(call.id, text='–ü–æ–∫–∞ –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç', show_alert=True)

    elif call.data == 'next5':

        index_string = core.top_docs_bm25okapi(call.message.text, corp, 10)
        index_string_2 = index_string[5:10]
        answer = ''
        for idx in index_string_2:
            if str(idx) in links_dictionary:
                for item in links_dictionary[str(idx)]:
                    answer += item + '\n'
                answer += doc[idx] + '\n\n'
            else:
                answer += str(idx) + '\n' + doc[idx] + '\n\n'
        bot.reply_to(call.message, text = answer, reply_markup=keyboard_feedback2())

bot.polling()



